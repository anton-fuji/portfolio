name: Deploy to S3/CloudFront

on:
    push:
        branches:
            - main

permissions:
    id-token: write
    contents: read

defaults:
    run:
        shell: bash

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    build:
        name: Build for CD
        runs-on: ubuntu-latest
        timeout-minutes: 10
        steps:
            - name: Checkout Repo
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
              
            - name: Setup & Run Build
              uses: ./.github/actions/setup
              with:
                script: build

    deploy:
        name: Deploy to AWS
        needs: build
        runs-on: ubuntu-latest
        timeout-minutes: 10
        environment: production
        
        steps:
            - name: Checkout Repo
              uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

            - name: Install Dependencies
              uses: ./.github/actions/setup
              with:
                script: ""

            - name: Build My Site
              run: npm run build

            - name: Get OIDC Token for Debugging
              id: debug_token
              uses: actions/github-script@v6 
              with:
                  script: |
                    const core = require('@actions/core');
                    try {
                      const token = await core.getIDToken('sts.amazonaws.com');
                      const decodedToken = JSON.parse(Buffer.from(token.split('.')[1], 'base64').toString());
                      core.info(`Decoded OIDC Token Subject (sub): ${decodedToken.sub}`); 
                      core.info(`Decoded OIDC Token Audience (aud): ${decodedToken.aud}`);
                      } catch (error) {
                      core.error(`Failed to get OIDC token for debugging: ${error.message}`);
                    }

            - name: Configure AWS Credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
                aws-region: ap-northeast-1

            - name: Get CloudFront Distribution ID
              run: |
                S3_BUCKET_NAME="${{ vars.S3_BUCKET_NAME }}"
                echo "S3_BUCKET_NAME=$S3_BUCKET_NAME" >> $GITHUB_ENV
                echo "Using S3 Bucket Name: $S3_BUCKET_NAME"

                CLOUDFRONT_DISTRIBUTION_ID=$(aws cloudfront list-distributions --query "DistributionList.Items[?Aliases.Items!=null && contains(Aliases.Items, '${{ vars.DOMAIN_NAME }}')].Id" --output text | head -n 1)
                if [ -z "$CLOUDFRONT_DISTRIBUTION_ID" ]; then
                    echo "Error: CloudFront Distribution not found for domain ${{ vars.DOMAIN_NAME }}. Please check your GitHub Variables or CloudFront aliases."
                    exit 1
                fi
                echo "CLOUDFRONT_DISTRIBUTION_ID=$CLOUDFRONT_DISTRIBUTION_ID" >> $GITHUB_ENV
                echo "CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"

                CLOUDFRONT_DOMAIN_NAME=$(aws cloudfront get-distribution --id $CLOUDFRONT_DISTRIBUTION_ID --query "Distribution.DomainName" --output text)
                echo "CLOUDFRONT_DOMAIN_NAME=$CLOUDFRONT_DOMAIN_NAME" >> $GITHUB_ENV
                echo "CloudFront Domain Name: $CLOUDFRONT_DOMAIN_NAME"
                
              env:
                S3_BUCKET_NAME: ${{ vars.S3_BUCKET_NAME }}
                DOMAIN_NAME: ${{ vars.DOMAIN_NAME }} 

            - name: Upload dist/ to S3
              run: aws s3 cp dist/ s3://${{ env.S3_BUCKET_NAME }}/ --recursive --delete

            - name: Invalidate Cloudfront Cache
              run: |
                aws cloudfront create-invalidation \
                    --distribution-id ${{ env.CLOUDFRONT_DISTRIBUTION_ID }} \
                    --paths "/*"

            - name: MySite URL
              run: echo "Ciick on https://${{ env.CLOUDFRONT_DOMAIN_NAME }}"




